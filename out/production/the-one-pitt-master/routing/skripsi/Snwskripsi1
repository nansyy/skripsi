package routing.skripsi;

import java.util.*;
import routing.*;
import core.*;


public class SnWskripsi1 extends ActiveRouter {
    protected Map<DTNHost, List<DTNHost>> coupledNode;
    protected Map<DTNHost, Double> lastMeetingTimes; // Menyimpan waktu terakhir pertemuan dengan setiap node
    protected double intervalTime; // Waktu mulai interval saat ini
    protected double lastIntervalTime;
    protected List<Double> intervalAverages; // Menyimpan rata-rata waktu inter-contact per interval
    protected ArrayList<Double> T1_samples;
    protected ArrayList<Double> T2_samples;


    private int estimatedM;
    private double alpha;
    private double mixingTime = 691200;
    private int threshold;

    public static final String ALPHA_ALG_SETTING = "alpha";  //added
    public static final String MIXING_TIME_SETTING = "mixingTime";
    public static final String THRESHOLD_SETTING = "threshold";

    /**
     * identifier for the initial number of copies setting ({@value})
     */
    public static final String NROF_COPIES = "nrofCopies";
    /**
     * identifier for the binary-mode setting ({@value})
     */
    public static final String BINARY_MODE = "binaryMode";
    /**
     * SprayAndWait router's settings name space ({@value})
     */
    public static final String SPRAYANDWAIT_NS = "SprayAndWaitRouter";
    /**
     * Message property key
     */
    public static final String MSG_COUNT_PROPERTY = SPRAYANDWAIT_NS + "." +
            "copies";

    protected int initialNrofCopies;
    protected boolean isBinary;


    /**
     * Used to save state machine when new connections are made. See comment in
     * changedConnection()
     */
    protected Map<Connection, Integer> conStates;

    public SnWskripsi1(Settings s) {
        super(s);

        if (s.contains(ALPHA_ALG_SETTING)) mixingTime = s.getDouble(ALPHA_ALG_SETTING);
        else alpha = 0.98;

        double mTime;
        if (s.contains(MIXING_TIME_SETTING)) {
            mTime = s.getDouble(MIXING_TIME_SETTING);
        } else {
            mTime = mixingTime;
        }
        if (s.contains(THRESHOLD_SETTING)) threshold = s.getInt(THRESHOLD_SETTING);
        else threshold = 25;

        Settings snwSettings = new Settings(SPRAYANDWAIT_NS);

        initialNrofCopies = snwSettings.getInt(NROF_COPIES);
        isBinary = snwSettings.getBoolean(BINARY_MODE);

    }

    public SnWskripsi1(SnWskripsi1 proto) {
        super(proto);
        this.initialNrofCopies = proto.initialNrofCopies;
        this.isBinary = proto.isBinary;
        coupledNode = new HashMap<>();
        lastMeetingTimes = new HashMap<>();
        intervalAverages = new LinkedList<>();
        intervalTime = 1000;
        this.T1_samples = new ArrayList<>(proto.T1_samples);
        this.T2_samples = new ArrayList<>(proto.T2_samples);
        this.estimatedM = proto.estimatedM;
        this.alpha = proto.alpha;
        this.mixingTime = proto.mixingTime;
        this.threshold = proto.threshold;
        this.lastIntervalTime = proto.lastIntervalTime;

    }

    //@Override
    public MessageRouter replicate() {
        return new SnWskripsi1(this);
    }

    @Override
    public boolean createNewMessage(Message msg) {
        makeRoomForNewMessage(msg.getSize());

        msg.setTtl(this.msgTtl);
        msg.addProperty(MSG_COUNT_PROPERTY, new Integer(initialNrofCopies));
        addToMessages(msg, true);
        return true;
    }

    @Override
    public void connectionUp(Connection con) {
        DTNHost thisHost = getHost();
        DTNHost peer = con.getOtherNode(thisHost);

        double currentTime = SimClock.getTime();

        reset();
//        // Pastikan thisHost ada di coupledNode
//        coupledNode.putIfAbsent(thisHost, new ArrayList<>());
//        if (!coupledNode.get(thisHost).contains(peer)) {
//            coupledNode.get(thisHost).add(peer);
//        }
//
//        // Pastikan peer juga ada di coupledNode
//        coupledNode.putIfAbsent(peer, new ArrayList<>());
//        if (!coupledNode.get(peer).contains(thisHost)) {
//            coupledNode.get(peer).add(thisHost);
//        }
        //Cek apakah sudah pernah bertemu peer sebelumnya
        if (coupledNode.containsKey(thisHost)) {
            List<DTNHost> couple = coupledNode.get(thisHost);
            if (!couple.contains(peer)) {
                couple.add(peer);
            }
        } else {
            List<DTNHost> couple = coupledNode.get(peer);
            if (!couple.contains(thisHost)) {
                couple.add(thisHost);
            }
        }

        if (lastMeetingTimes.containsKey(thisHost)) {
            double lastMeetingTime = lastMeetingTimes.get(thisHost);
            double interContactTime = currentTime - lastMeetingTime;
            T1_samples.add(interContactTime);
            T2_samples.add(interContactTime);
        }


        estimateNumberOfNodes();
    }

    private int estimateNumberOfNodes() {
        // Hitung rata-rata dari semua sample waktu inter-contact
        if (T1_samples.size() >= threshold && T2_samples.size() >= threshold) {

            // Hitung rata-rata T1 dan T2
            double avgT1 = calculateAverage(T1_samples);
            double avgT2 = calculateAverage(T2_samples);

            // Estimasi M menggunakan rumus
            int currentM = (int) ((int) (2 * avgT2 - 3 * avgT1) / (avgT2 - 2 * avgT1));

            // Perbarui estimasi dengan running average
            if (estimatedM == 0) {
                estimatedM = currentM; // Inisialisasi pertama
            } else {
                estimatedM = (int) (alpha * estimatedM + (1 - alpha) * currentM);
            }

        }
        return estimatedM;
    }

    private double calculateAverage(List<Double> samples) {
        double sum = 0;
        for (double sample : samples) {
            sum += sample;
        }
        return sum / samples.size();
    }


    @Override
    public void connectionDown(Connection con) {
        DTNHost myHost = getHost();
        DTNHost peer = con.getOtherNode(myHost);
        DecisionEngineRouter de = (DecisionEngineRouter) peer.getRouter();

        this.lastMeetingTimes.put(peer, SimClock.getTime());

    }

    private void reset() {
        double currentTime = SimClock.getTime();
        if (currentTime - lastIntervalTime >= intervalTime) {
            coupledNode.clear();
            lastMeetingTimes.clear();
            lastIntervalTime = currentTime;
        }
    }

    protected void doExchange(Connection con, DTNHost otherHost) {
        conStates.put(con, 1);

    }

    protected void didExchange(Connection con) {
        conStates.put(con, 1);
    }


    @Override
    public int receiveMessage(Message m, DTNHost from) {
        return 0;
    }

    @Override
    public Message messageTransferred(String id, DTNHost from){
        Message msg = super.messageTransferred(id, from);
        Integer nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);

        assert nrofCopies != null : "Not a SnW message: " + msg;

        if (isBinary) {
            /* in binary S'n'W the receiving node gets ceil(n/2) copies */
            nrofCopies = (int)Math.ceil(nrofCopies/2.0);
        }
        else {
            /* in standard S'n'W the receiving node gets only single copy */
            nrofCopies = 1;
        }

        msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
        return msg;
    }


    @Override
    protected void transferDone(Connection con) {
        Integer nrofCopies;
        String msgId = con.getMessage().getId();
        /* get this router's copy of the message */
        Message msg = getMessage(msgId);

        if (msg == null) { // message has been dropped from the buffer after..
            return; // ..start of transfer -> no need to reduce amount of copies
        }

        /* reduce the amount of copies left */
        nrofCopies = (Integer) msg.getProperty(MSG_COUNT_PROPERTY);
        if (isBinary) {
            nrofCopies /= 2;
        } else {
            nrofCopies--;
        }
        msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
    }


    @Override
    public void update() {
        super.update();
        if (!canStartTransfer() || isTransferring()) {
            return; // nothing to transfer or is currently transferring
        }

        /* try messages that could be delivered to final recipient */
        if (exchangeDeliverableMessages() != null) {
            return;
        }

        /* create a list of SAWMessages that have copies left to distribute */
        @SuppressWarnings(value = "unchecked")
        List<Message> copiesLeft = sortByQueueMode(getMessagesWithCopiesLeft());

        if (copiesLeft.size() > 0) {
            /* try to send those messages */
            this.tryMessagesToConnections(copiesLeft, getHost().getConnections());
        }
    }

    protected List<Message> getMessagesWithCopiesLeft() {
        List<Message> list = new ArrayList<Message>();

        for (Message m : getMessageCollection()) {
            Integer nrofCopies = (Integer) m.getProperty(MSG_COUNT_PROPERTY);
            assert nrofCopies != null : "SnW message " + m + " didn't have " +
                    "nrof copies property!";
            if (nrofCopies > 1) {
                list.add(m);
            }
        }

        return list;
    }


    protected boolean shouldNotifyPeer(Connection con) {
        Integer i = conStates.get(con);
        return i == null || i < 1;
    }

}



